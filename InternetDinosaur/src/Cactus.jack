/**
 * Graphical Cactus obstacle model class 
 */
class Cactus{

    field int x,y;
    field int location;
    field boolean isActive;

    method void show(){
        do draw();
        return;
    }

    method void hide(){
        do undraw();
        return;
    }

    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }

    method void draw(){
        var int memAddress;
        let location = Commons.getLocation(x,y);
        let memAddress = 16384+location;
        do Memory.poke(memAddress+32, 2244);
        do Memory.poke(memAddress+64, 2244);
        do Memory.poke(memAddress+96, 2244);
        do Memory.poke(memAddress+128, 2244);
        do Memory.poke(memAddress+160, 2244);
        do Memory.poke(memAddress+192, 2244);
        do Memory.poke(memAddress+224, 3276);
        do Memory.poke(memAddress+256, 1752);
        do Memory.poke(memAddress+288, 1008);
        do Memory.poke(memAddress+320, 192);
        do Memory.poke(memAddress+352, 192);
        do Memory.poke(memAddress+384, 192);
        do Memory.poke(memAddress+416, 192);
        do Memory.poke(memAddress+448, 192);
        do Memory.poke(memAddress+480, 192);
        return;
    }

    method void undraw(){
        var int memAddress;
        let location = Commons.getLocation(x,y);
        let memAddress = 16384+location;
        do Memory.poke(memAddress+32,0);
        do Memory.poke(memAddress+64,0);
        do Memory.poke(memAddress+96,0);
        do Memory.poke(memAddress+128,0);
        do Memory.poke(memAddress+160,0);
        do Memory.poke(memAddress+192,0);
        do Memory.poke(memAddress+224,0);
        do Memory.poke(memAddress+256,0);
        do Memory.poke(memAddress+288,0);
        do Memory.poke(memAddress+320,0);
        do Memory.poke(memAddress+352,0);
        do Memory.poke(memAddress+384,0);
        do Memory.poke(memAddress+416,0);
        do Memory.poke(memAddress+448,0);
        do Memory.poke(memAddress+480,0);
        return;
    }

    method void moveLeft(){
        if( ~isActive ){
            return;
        }
        if( (x < 2) | (hasCollided()) ){
            do hide();
            let isActive = false;
            return;
        }
        do hide();
        let x = x - 10;
        do show();
        return;
    }
    // Collision logic
    method boolean hasCollided(){
        var int currX, currY;
        let currX = DinosaurController.getCurrX();
        let currY = DinosaurController.getCurrY();
        if( (x < 50) & (x + 5 > currX) ){
            if(currY + 48 > y){ // because 3 times size scaling
                do Commons.setGameOver(true);
                return true;
            }
        }
        return false;
    }
    
}
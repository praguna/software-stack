/**
*   Game class acts as a controller for the whole Game
*/

class Game{
    static Game instance;
    field boolean exit;
    field boolean restart;
    field Dinosaur dinosaur;
    field ObstacleHandler ob;

    constructor Game new(){
        do Screen.clearScreen();
        do Commons.printEntryDetails();
        return this;
    }
/**
    Many variables are initialized at each Game spawn begining
*/
    method void init(){
        do Screen.clearScreen();
        do Commons.init();
        do DinosaurController.newDinosaur(20,150,20,166);
        let ob = ObstacleHandler.new();
        let exit = false;
        do Screen.drawRectangle(0, 238, 511, 240);
        do Screen.drawLine(0, 200, 511, 200); 
        do Commons.bottomDisplay();
        return;
    }
/**
    This Function accepts keyboard input and runs the game
*/
    method void run(){
        var int key;
        while( ~(key = 83) ){
            let key = Keyboard.keyPressed();
        }
        do init();
         while (~exit){
            while((~exit) & (key = 0) & ~(restart)){
                let key = Keyboard.keyPressed();
                do runAnimate();
                do Commons.printScore();
            }
            if (key = 69) { 
                let exit = true;
                do Commons.printEndCredits(Commons.getScore()); 
                do Output.moveCursor(22,10);
             }

            if( (restart) ){
                let restart = false;
                while( ~(key = 82) ){
                   let key = Keyboard.keyPressed();
                }  
                do Commons.setGameOver(false);
                do dellocate();
                do init();
            }

            if ( (key = 131) &  (DinosaurController.islanded()) ) {  
                do DinosaurController.jump(); 
                }
            if( (key = 133)){
                do DinosaurController.shrink(true);
            }
            while( (key = 133) ){
                let key = Keyboard.keyPressed();
                 if( ~(key = 133) ){
                    do DinosaurController.shrink(false);
                }
                do runAnimate();
                do Commons.printScore();
            }
            let key = 0;
         }
         return;
    }
/**
    Updating objects at each time step
*/
    method void runAnimate(){
        if(Commons.getGameOver()){
            let restart = true;
            do Commons.printExitDetails(Commons.getScore());
        }
        do DinosaurController.animate();
        do ob.animate();
        return;
    }

    method void dellocate(){
        do DinosaurController.dispose();
        do ob.dispose();
        return;
    }

    method void dispose(){
        do dellocate();
        do Memory.deAlloc(this);
        return;
    }

    function void newInstance() {
        let instance = Game.new();
        return;
    }

    function Game getInstance() {
        return instance;
    }
}
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;
    field int size;


    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        let size = maxLength;
        if(~(maxLength = 0)){
            let str = Array.new(maxLength);
        }
        return this;
    }   

    /** Disposes this string. */
    method void dispose() {
        if(~(size = 0)){
            do Memory.deAlloc(str);
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, res,s, c;
        var boolean f;
        let s = 1;
        if(charAt(0) = 45){ 
            let s = -1;
            let i = 1;
        }
        while((i < length) & ~(f)){
            let c = charAt(i);
            if(~(c < 48) & ~(c > 57)){
                let res = (res * 10) + (c - 48); 
            }else{
                let f = true;
            }
            let i = i + 1;
        }
        return res*s;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        do setIntHelper(val);
        return;
    }

    /** Set int helper **/
    method void setIntHelper(int val){
         var int mod,q;
        if(val < 0){
            do appendChar(45);
        }
        let val = Math.abs(val);
        if(val < 10){
            do appendChar(val + 48);
        }else{
            let q = val/10;
            let mod = val - (10 * q);
            do setIntHelper(q);
            do appendChar(mod + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {   
        return 34;
    }
}
